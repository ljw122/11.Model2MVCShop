<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ProductMapper">
	
	<resultMap id="productSelectMap" type="com.model2.mvc.service.domain.Product">
		<result property="prodNo" column="prod_no" jdbcType="NUMERIC"/>
		<result property="prodName" column="prod_name" jdbcType="VARCHAR"/>
		<result property="prodDetail" column="prod_detail" jdbcType="VARCHAR"/>
		<result property="manuDate" column="manufacture_day" jdbcType="VARCHAR"/>
		<result property="price" column="price" jdbcType="NUMERIC"/>
		<result property="fileName" column="image_file" jdbcType="VARCHAR"/>
		<result property="regDate" column="reg_date" jdbcType="DATE"/>
		<result property="stock" column="stock" jdbcType="NUMERIC"/>
		<result property="proTranCode" column="tran_status_code" jdbcType="VARCHAR"/>
	</resultMap>
	
	<resultMap id="replySelectMap" type="com.model2.mvc.service.domain.Reply">
		<result property="replyNo" column="reply_no" jdbcType="NUMERIC"/>
		<result property="cmt" column="cmt" jdbcType="VARCHAR"/>
		<result property="regDate" column="reply_reg_date" jdbcType="DATE"/>
		<result property="updDate" column="upd_date" jdbcType="DATE"/>
		<result property="userId" column="user_id" jdbcType="VARCHAR"/>
	</resultMap>
	
	<insert id="addProduct" parameterType="com.model2.mvc.service.domain.Product">
		INSERT
		INTO product 
		VALUES(
			seq_product_prod_no.NEXTVAL,
			#{prodName}, #{prodDetail}, #{manuDate}, #{price}, #{fileName:VARCHAR},
			SYSDATE, #{stock}
		)
	</insert>
	
	<select id="getProduct" parameterType="int" resultMap="productSelectMap">
		SELECT
		p.prod_no, p.prod_name, p.image_file, p.prod_detail, p.manufacture_day, p.price, p.reg_date, p.stock-NVL(COUNT(t.tran_no),0) stock
		FROM product p, transaction t
		<where>
			p.prod_no=t.prod_no(+)
			AND p.prod_no=#{prodNo}
		</where>
		GROUP BY p.prod_no, p.prod_name, p.image_file, p.prod_detail, p.manufacture_day, p.price, p.reg_date, p.stock, t.prod_no
	</select>
	
	<update id="updateProduct" parameterType="com.model2.mvc.service.domain.Product">
		UPDATE product
		<set>
			<if test="prodName!=null">prod_name=#{prodName},</if>
			<if test="prodDetail!=null">prod_detail=#{prodDetail},</if>
			manufacture_day=#{manuDate:VARCHAR},
			price =	<if test="price==0">null</if>
					<if test="price!=0">#{price}</if>,
			image_file=#{fileName:VARCHAR},
			stock=stock+	<if test="stock==0">0</if>
							<if test="stock!=0">#{stock}</if>
		</set>
		WHERE prod_no=#{prodNo}
	</update>
		
	<sql id="productList">
		SELECT
		p.prod_no, p.prod_name, p.price, p.reg_date, p.prod_detail, p.stock-NVL(COUNT(t.tran_no),0) stock
		FROM product p, transaction t
		<where>
			p.prod_no=t.prod_no(+)
			<if test="searchCondition != null and searchCondition != ''">
				<choose>
					<when test="searchCondition == 1 and searchKeyword != ''">
						AND prod_name LIKE '%${searchKeyword}%'
					</when>
					<when test="searchCondition == 2">
						<if test="searchKeyword != null and searchKeyword != ''">
							AND price >= ${searchKeyword}
						</if>
						<if test="searchKeyword2 != null and searchKeyword2 != ''">
							AND price <![CDATA[<]]>= ${searchKeyword2}
						</if>
					</when>
				</choose>
			</if>
		</where>
		GROUP BY p.prod_no, p.prod_name, p.price, p.reg_date, p.prod_detail, p.stock, t.prod_no
		<trim prefix="HAVING" prefixOverrides="AND | OR">
			<if test="!stockView">
				p.stock-NVL(COUNT(t.tran_no),0) > 0
			</if>
		</trim>
		ORDER BY
		<if test="orderCondition != null and orderCondition != ''">
			<if test="orderCondition == 1">prod_name</if>
			<if test="orderCondition == 2">price</if> ${orderOption},
		</if>
		p.prod_no DESC
	</sql>


	<select id="getProductList" parameterType="com.model2.mvc.common.Search" resultMap="productSelectMap">
		SELECT *
		FROM ( SELECT inner_table.*, ROWNUM row_seq
		       FROM ( <include refid="productList"/> ) inner_table
		       WHERE ROWNUM <![CDATA[<]]>=${currentPage}*${pageSize} )
		WHERE row_seq BETWEEN ${(currentPage-1)*pageSize+1} AND ${currentPage*pageSize}
	</select>
	
	<select id="getTotalCount" parameterType="com.model2.mvc.common.Search" resultType="int">
		SELECT
		COUNT(*)
		FROM ( <include refid="productList"/> )
	</select>
	
	<select id="getProductCommentList" parameterType="int" resultMap="replySelectMap">
		SELECT 
			r.cmt, r.reg_date , r.upd_date, r.user_id, r.reply_no
		FROM 
			product p, reply r
		WHERE 
			p.prod_no=r.prod_no(+) AND p.prod_no=#{value} AND cmt IS NOT NULL AND r.reply_no IN r.outer_reply
		ORDER BY 
			r.reply_no
	</select>
	
	<select id="getProductInnerCommentList" parameterType="int" resultMap="replySelectMap">
		SELECT 
			cmt, reg_date , upd_date, user_id, reply_no
		FROM 
			reply
		WHERE 
			cmt IS NOT NULL AND outer_reply IN #{value} AND reply_no NOT IN outer_reply
		ORDER BY 
			reply_no
	</select>
	
	<insert id="insertProductComment" parameterType="com.model2.mvc.service.domain.Product">
		INSERT INTO reply 
		VALUES(
			seq_reply_reply_no.nextval,
			#{prodNo},
			#{replyList[0].userId},
			#{replyList[0].cmt:VARCHAR},
			<if test="replyList[0].replyNo != 0">#{replyList[0].replyNo},</if>
			<if test="replyList[0].replyNo == 0">seq_reply_reply_no.currval,</if>
			SYSDATE,
			NULL	)
	</insert>
	
	<select id="getProductNames" parameterType="java.lang.String" resultMap="productSelectMap">
		SELECT
			prod_name
		FROM
			product
		WHERE
			prod_name LIKE '%${value}%'
	</select>
	
	
</mapper>